"use strict";

var HE = require("htmlencode");

var proto = require("utils/proto");
var Stack = require("utils/stack");

function Html(out) {
	this.out = out;
	this.stack = Stack.create();
	this.isOpen = false;
}

proto(Html, function raw(str) {
	this.out.write(str);

}, function empty() {
	return this.stack.empty();

}, function top() {
	return this.stack.top();

}, function put(tag) {
	this.closeOpened();

	this.raw("<" + tag);

	this.isOpen = true;

}, function open(tag) {
	this.put(tag);
	this.stack.push(tag);

	this.isOpen = true;

}, function closeOpened() {
	if (this.isOpen) {
		this.raw(">");

		this.isOpen = false;
	}

}, function close() {
	var tag = this.stack.pop();

	this.closeOpened();

	this.raw("</" + tag + ">");

}, function closeTo(tag) {
	var top;

	while (!this.empty()) {
		top = this.top();

		this.close();

		if (top === tag) {
			break;
		}
	}

}, function end() {
	this.closeOpened();

	while (!this.empty()) {
		this.close();
	}

}, function text(str) {
	this.closeOpened();

	this.raw(HE.htmlEncode(str));

}, function attr(name, val) {
	if (this.isOpen) {
		this.raw(" " + name + "=\"" + val + "\"");
	}

}, function id(val) {
	this.attr("id", val);

}, function cls(val) {
	this.attr("class", val);

}, function table() {
	this.open("table");

}, function tr() {
	if (this.top() !== "table") {
		this.closeTo("tr");
	}

	this.open("tr");

}, function col(tag, val) {
	if (this.top() === "table") {
		this.tr();
	}

	if (this.top() !== "tr") {
		this.closeTo(tag);
	}

	this.open(tag);

	if (val) {
		this.text(val);
		this.close();
	}

}, function th(val) {
	this.col("th", val);

}, function td(val) {
	this.col("td", val);

}, function css(file) {
	this.put("link");

	this.attr("href", file + ".css");
	this.attr("type", "text/css");
	this.attr("rel", "stylesheet");

	this.closeOpened();
});

exports.create = function (out) {
	return new Html(out);
};
